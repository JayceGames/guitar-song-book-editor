package songer.ui.view;

import javax.swing.*;
import java.awt.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class TextDialog extends JDialog {
    private JTextField textField = new JTextField();
    
    
    private String returnValue;
    
    /** Pattern which the entered text has to match. */
    private Pattern pattern;

    /**
     * Creates new form TextDialog with the specified parameters.
     * @param parent      Parent frame
     * @param pattern     Pattern fot the validation of the input text.
     * @param title       Title of the dialog.
     * @param description Descrition of the text which should be entered.
     */
    public TextDialog(java.awt.Frame parent, Pattern pattern, String title, String description) {
        super(parent, true);
        this.pattern = pattern;
        initComponents(description);
        setTitle(title);
        //setResizable(false);
    }


    /**
     * Runs the dialog - USE ONLY THIS TO START THE DIALOG.
     * @return String if dialog was closed with OK button and the text was verified against the regexp; NULL otherwise.
     */
    public String runDialog() {
        returnValue = null;
        textField.setText("");
        setVisible(true);
        return returnValue;
    }

    private void onOkActionPerformed() {
        Matcher matcher = pattern.matcher(textField.getText());
        if (!matcher.matches()) {
            JOptionPane.showMessageDialog(this, "Invalid text supplied - must match the regexp:\n\n\"" + pattern.pattern() + "\"", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        returnValue = textField.getText();
        this.setVisible(false);
    }


    private void onCancelActionPerformed() {
        this.setVisible(false);
    }




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents(String description) {
        // == BOTTOM PANEL ==
        JButton okButton = new javax.swing.JButton();
        JButton cancelButton = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOkActionPerformed();
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancelActionPerformed();
            }
        });

        Box bottomComponent = Box.createHorizontalBox();
        bottomComponent.setAlignmentX(Component.LEFT_ALIGNMENT);
        bottomComponent.add( Box.createHorizontalGlue() );
        bottomComponent.add(okButton);
        bottomComponent.add( Box.createRigidArea(new Dimension(200, 10)) );
        bottomComponent.add(cancelButton);
        bottomComponent.add( Box.createHorizontalGlue() );

        // == Center Panel ==
        JLabel descriptionLabel = new JLabel(description);
        descriptionLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        textField.setAlignmentX(Component.LEFT_ALIGNMENT);
        textField.setMaximumSize(new Dimension(Integer.MAX_VALUE, textField.getPreferredSize().height));

        Box mainPane = Box.createVerticalBox();
        mainPane.add( Box.createRigidArea( new Dimension(10,10)) );
        mainPane.add(descriptionLabel);
        mainPane.add(textField);
        mainPane.add( Box.createVerticalGlue() );
        mainPane.add( Box.createRigidArea( new Dimension(10,10)) );
        mainPane.add(bottomComponent);
        mainPane.add( Box.createRigidArea( new Dimension(10,10)) );

        Dimension size = new Dimension(500,150);
        setMinimumSize(size);
        setMaximumSize(size);
        setContentPane(mainPane);
    }
}
